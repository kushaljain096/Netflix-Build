{"version":3,"sources":["axios.js","requests.js","Banner.js","Nav.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/PlanScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","request","fetchTrending","fetchNetflixOriginals","fetchComedyMovies","fetchTopRated","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banneer","string","n","useState","movie","setMovie","useEffect","a","get","requests","data","results","Math","floor","random","length","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","history","useNavigate","transitionNavBar","window","scrollY","addEventListener","onClick","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","console","log","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlanScreen","products","setProducts","useSelector","subscription","setSubscription","collection","doc","uid","querySnapshot","forEach","role","current_period_end","seconds","current_period_start","where","productDoc","docs","price","prices","priceId","priceData","loadCheckout","add","success_url","location","origin","cancel_url","onSnapshot","snap","sessionId","loadStripe","redirectToCheckout","Date","toLocaleDateString","Object","entries","productId","productData","isCurrentPackage","includes","description","ProfileScreen","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","excat","path","element","store","configureStore","reducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de42301e.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance=axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n})\nexport default instance;","const API_KEY=\"34b6da7187eb3a43ccce08b0c6a485fa\";\n\nconst request={\nfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`, \nfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\nfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`, \nfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\nfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\nfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`, \nfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\nexport default request;","import React, { useEffect, useState } from \"react\";\nimport \"./Banner.css\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nfunction Banneer() {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[\n                Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n            );\n            return request;\n\n        }\n        fetchData();\n    }, []);\n    // console.log(movie);\n\n    function truncate(string, n) {\n        return string?.length > n ? string.substr(0, n - 1) + '...' : string;\n    }\n    return (<header className=\"banner\" style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center center\"\n    }}>\n        <div className=\"banner_contents\">\n            <h1 className=\"banner_title\">${movie?.title || movie?.name || movie?.original_name}</h1>\n            <div className=\"banner_buttons\">\n                <button className=\"banner_button\">Play</button>\n                <button className=\"banner_button\">My List</button>\n            </div>\n            <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n            <div className=\"banner_fadebottom\" />\n        </div>\n    </header>\n    );\n\n}\n\n\nexport default Banneer;\n","import React, {useState,useEffect} from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Nav.css\";\n\nfunction Nav(){\n    \n    const[show, handleShow]= useState(false);\n    const history = useNavigate()\n\n    const transitionNavBar = () =>{\n        if(window.scrollY > 100){\n            handleShow(true);\n        }\n        else{\n            handleShow(false);\n        }\n\n    };\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\",transitionNavBar);\n        return()=> window.addEventListener(\"scroll\", transitionNavBar);\n    }, []);\n\n\n    return (\n        <div className={`nav ${show && \"nav_black\"}`}>\n            <div className=\"nav_contents\">\n                <img onClick={()=>history(\"/\")}\n                className=\"nav_logo\"\n                    src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\n                <img onClick ={ () => history(\"/profile\")}\n                className=\"nav_avatar\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"\" />\n\n\n            </div>\n        </div>\n    );\n}\nexport default Nav;\n\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\n\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n\n    const [movies, setMovies] = useState([]);\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row_posters\">\n            {movies.map((movie) => \n            ((isLargeRow && movie.poster_path) ||\n            (!isLargeRow && movie.backdrop_path)) && (\n\n                <img\n                    className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                    key={movie.id}\n                    src={`${base_url}${\n                        isLargeRow ? movie.poster_path : movie.backdrop_path\n                        }`}\n                    alt={movie.name}\n                />\n            )\n            )}\n            </div>\n        </div>\n    );\n}\n\nexport default Row;\n","import React from 'react'\nimport Banneer from \"../Banner\";\nimport \"./HomeScreen.css\";\nimport Nav from\"../Nav\";\nimport requests from \"../requests\";\nimport Row from\"../Row\"; \n\nfunction HomeScreen() {\n    return (\n        <div className=\"homeScreen\">\n            <Nav />\n           <Banneer />\n           <Row title=\"NETFLIX ORIGINALS\" \n           fetchUrl={requests.fetchNetflixOriginals}\n           isLargeRow/>\n           <Row title=\"Treanding Now\" fetchUrl={requests.fetchTrending}/>\n           <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n           <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n           <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n           <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n           <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n            \n        </div>\n    );\n}\n\nexport default HomeScreen;\n","import firebase from 'firebase';\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBmXCrOizjvTW8alTjIWpuFtJ0czbsaIaE\",\n    authDomain: \"netflix-build-f1215.firebaseapp.com\",\n    projectId: \"netflix-build-f1215\",\n    storageBucket: \"netflix-build-f1215.appspot.com\",\n    messagingSenderId: \"654885628301\",\n    appId: \"1:654885628301:web:ccacafdf4abf3b3fff35c4\"\n  };\n  const firebaseApp=firebase.initializeApp(firebaseConfig)\n  const db= firebaseApp.firestore();\n  const auth=firebase.auth();\n\n  export{auth};\n  export default db;","import React,{useRef} from 'react'\nimport { auth } from '../firebase';\nimport \"./SignupScreen.css\"\n\nfunction SignupScreen() {\n\n    const emailRef=useRef(null);\n    const passwordRef=useRef(null);\n\n    const register=(e)=>{\n        e.preventDefault();\n        auth.createUserWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        ).then((authUser)=>{\n            console.log(authUser)\n        })\n        .catch((error)=>{\n            alert(error.message);\n        });\n        \n    }\n    const signIn=(e)=>{\n        e.preventDefault();\n        auth.signInWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        ).then((authUser)=>{\n            console.log(authUser)\n        })\n        .catch((error)=>{\n            alert(error.message);\n        });\n    }\n    return (\n        <div className=\"signupScreen\">\n            <form >\n                <h1>Sign In</h1>\n                <input ref={emailRef} placeholder=\"Email\" type=\"email\" />\n                <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\n                <button onClick={signIn} type=\"submit\">Sign In</button>\n                <h4>\n                    <span className=\"signupScreen_gray\">New to Netflix? </span>\n                    <span onClick={register} className=\"signupScreen_link\"> Sign Up now.</span>\n                </h4>\n            </form>\n        </div>\n    )\n}\n\nexport default SignupScreen;\n","import React,{useState} from \"react\";\nimport './LoginScreen.css'\nimport SignupScreen from \"./SignupScreen\";\nfunction LoginScreen() {\n    const[signIn, setSignIn]=useState(false);\n    return (\n        <div className=\"loginScreen\">\n            <div className=\"loginScreen_background\">\n                <img className=\"loginScreen_logo \" src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\n                <button onClick={() => setSignIn(true)}\n                className=\"loginScreen_button\">Sign IN</button>\n                <div className=\"loginScreen_gradient\"/>\n            </div>\n            <div className=\"loginScreen_body\">\n                {signIn ? (<SignupScreen/>):\n                ( <>\n                <h1>Unlimited film,TV programmes and more.</h1>\n                <h2>Watch anywhere.Cancel at any time.</h2>\n                <h3>Ready to watch. Enter your email to create or restart your membership.</h3>\n                <div className=\"loginScreen_input\">\n                    <form>\n                        <input type=\"email\"placeholder=\"Email Address\" />\n                        <button onClick={() => setSignIn(true)}\n                        className=\"loginScreen_getStarted\">GET STARTED</button>\n                    </form>\n                </div>\n\n                </>\n                )}\n                \n            </div>\n\n        </div>\n    )\n}\n\nexport default LoginScreen\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState:{\n    user: null,\n  },\n\n  reducers: {\n    login: (state, action)=>{\n      state.user = action.payload\n    },\n    logout: (state)=>{\n      state.user=null;\n    }\n  },\n});\n\nexport const { login , logout } = userSlice.actions;\nexport const selectUser = (state) => state.user.user;\nexport default userSlice.reducer;\n\n\n\n","// import { is } from '@reduxjs/toolkit/node_modules/immer/dist/internal';\nimport React, { useEffect, useState } from 'react'\nimport { selectUser } from '../features/userSlice';\nimport db from '../firebase';\nimport './PlanScreen.css'\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useSelector } from 'react-redux';\n// import { get } from '@reduxjs/toolkit/node_modules/immer/dist/internal';\n\nfunction PlanScreen() {\n    const [products, setProducts] = useState([]);\n    const user = useSelector(selectUser);\n    const [subscription, setSubscription] = useState(null);\n\n    useEffect(() => {\n        db.collection(\"customers\")\n            .doc(user.uid)\n            .collection(\"subscriptions\")\n            .get()\n            .then((querySnapshot) => {\n                querySnapshot.forEach(async (subscription) => {\n                    setSubscription({\n                        role: subscription.data().role,\n                        current_period_end: subscription.data().current_period_end.seconds,\n                        current_period_start: subscription.data().current_period_start.seconds,\n\n                    });\n                });\n            });\n\n    }, [user.uid])\n\n    useEffect(() => {\n        db.collection(\"products\")\n            .where(\"active\", \"==\", true)\n            .get()\n            .then((querySnapshot) => {\n                const products = {}\n                querySnapshot.forEach(async productDoc => {\n                    products[productDoc.id] = productDoc.data()\n                    const priceSnap = await productDoc.ref.collection\n                        (\"prices\").get();\n                    priceSnap.docs.forEach(price => {\n                        products[productDoc.id].prices = {\n                            priceId: price.id,\n                            priceData: price.data(),\n                        };\n                    });\n                });\n                setProducts(products);\n            });\n    }, []);\n    console.log(products);\n    console.log(subscription);\n\n    const loadCheckout = async (priceId) => {\n        const docRef = await db.collection(\"customers\").doc(user.uid).collection(\"checkout_sessions\")\n            .add({\n                price: priceId,\n                success_url: window.location.origin,\n                cancel_url: window.location.origin,\n            });\n        docRef.onSnapshot(async (snap) => {\n            const { error, sessionId } = snap.data();\n\n            if (error) {\n                alert(`An error occured:${error.message}`)\n            }\n\n            if (sessionId) {\n                const stripe = await loadStripe(\n                    \"pk_test_51K4ntSSDyBHC0aNGyFLDswA9fpQHmk2DN2MT8URr3QfjERmMaQavSCpmBFK6BP8LI8KtnIX48Z5933mMgSLjmjN400hrYkD8Ex\"\n                )\n                stripe.redirectToCheckout({ sessionId })\n            }\n        })\n\n\n    };\n    return (\n        <div className=\"plansScreen\">\n            <br />\n            {subscription && <p>Renewal date:{new Date(subscription?.current_period_end * 1000).toLocaleDateString()}</p>}\n            {Object.entries(products).map(([productId, productData]) => {\n                const isCurrentPackage = productData.name\n                    ?.includes(subscription?.role);\n                return (\n                    <div\n                        key={productId}\n                        className={`${isCurrentPackage && \"plansScreen_plan--disabled\"\n                            } plansScreen_plan `}>\n                        <div className=\"plansScreen_info\">\n                            <h5>{productData.name}</h5>\n                            <h6>{productData.description}</h6>\n                        </div>\n                        <button onClick={() =>\n                            !isCurrentPackage && loadCheckout(productData.prices.priceId)}>\n                            {isCurrentPackage ? \"Current Package\" : \"Subscribe\"}</button>\n                    </div>\n                );\n            })}\n\n        </div>\n    );\n}\n\nexport default PlanScreen\n","import React from 'react'\nimport \"./ProfileScreen.css\"\nimport Nav from '../Nav'\nimport { selectUser } from '../features/userSlice'\nimport { useSelector } from 'react-redux'\nimport { auth } from '../firebase'\nimport PlanScreen from './PlanScreen'\n\nfunction ProfileScreen() {\n    const user=useSelector(selectUser)\n    return (\n        <div className=\"profileScreen\">\n            <Nav />\n            <div className=\"profileScreen_body\">\n                <h1>Edit profile</h1>\n                <div className=\"profileScreen_info\">\n                    <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"\" />\n                    <div className=\"profileScreen_details\">\n                        <h2>{user.email}</h2>\n                        <div className=\"profileScreen_plans\">\n                        <h3>Plans</h3>\n                        <PlanScreen />\n                        </div>\n                        \n\n                          <button onClick={()=>auth.signOut()}\n                          className=\"profileScree_signOut\">Sign Out</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileScreen\n","import React, { useEffect} from \"react\";\n\nimport \"./App.css\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport ProfileScreen from \"./screens/ProfileScreen\";\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport { auth } from \"./firebase\";\nimport { useDispatch ,useSelector} from \"react-redux\";\nimport{ login, logout, selectUser} from \"./features/userSlice\"\n\nfunction App() {\n  const user =useSelector(selectUser);\n  \n  const dispatch=useDispatch();\nuseEffect(()=>{\n  const unsubscribe=auth.onAuthStateChanged((userAuth)=>{\n    if(userAuth){\n      dispatch(\n        login({\n          uid: userAuth.uid,\n          email: userAuth.email,\n              \n        })\n      );\n    \n    }else{\n      dispatch(logout());\n    }\n  });\n  return unsubscribe;\n},[dispatch]);\n\n  \n\n  return (\n    <div className=\"app\">\n    <Router>\n      {!user ?(<LoginScreen />):\n      (<Routes>\n        <Route excat path=\"/\" element={<HomeScreen/>}/>\n        <Route path=\"/profile\" element={<ProfileScreen/>}/>\n      </Routes>)}\n\n    </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}